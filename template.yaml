AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CloudOps Assistant â€“ Day 5 JWT Authentication with CORS Fix v2

Globals:
  Function:
    Tags:
      Service: cloudops-assistant
      Project: CloudOpsAssistant
      Environment: prod
  Api:
    Cors:
      AllowMethods: "'GET,POST,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"  # Allow all origins for development

Resources:
  # Day 1 - Repository Scanner Function
  RepoScannerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: repo_scanner.lambda_handler
      Runtime: python3.11
      CodeUri: backend/lambda/
      MemorySize: 1024
      Timeout: 300
      Layers:
        - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8
      Environment:
        Variables:
          USER_POOL_ID: !Ref CloudOpsUserPool
          USER_POOL_CLIENT_ID: !Ref CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: repo-scanning
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /scan-repos
            Method: POST
        ApiOptions:
          Type: Api
          Properties:
            Path: /scan-repos
            Method: OPTIONS

  # Day 1 - Plan Processor Function
  PlanProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: plan_processor.lambda_handler
      Runtime: python3.11
      CodeUri: backend/lambda/
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          USER_POOL_ID: !Ref CloudOpsUserPool
          USER_POOL_CLIENT_ID: !Ref CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: plan-processing
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TerraformPlansTable
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload-plan
            Method: POST
        ApiOptions:
          Type: Api
          Properties:
            Path: /upload-plan
            Method: OPTIONS

  # Day 2 - Plan History Function
  PlanHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: plan_history.lambda_handler
      Runtime: python3.11
      CodeUri: backend/lambda/
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref CloudOpsUserPool
          USER_POOL_CLIENT_ID: !Ref CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: plan-history
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TerraformPlansTable
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        HistoryApi:
          Type: Api
          Properties:
            Path: /plan-history/{repo}
            Method: GET
        CompareApi:
          Type: Api
          Properties:
            Path: /compare-plans/{plan1}/{plan2}
            Method: GET
        PlanDetailsApi:
          Type: Api
          Properties:
            Path: /plan-details/{plan_id}
            Method: GET
        HistoryOptions:
          Type: Api
          Properties:
            Path: /plan-history/{repo}
            Method: OPTIONS
        CompareOptions:
          Type: Api
          Properties:
            Path: /compare-plans/{plan1}/{plan2}
            Method: OPTIONS
        PlanDetailsOptions:
          Type: Api
          Properties:
            Path: /plan-details/{plan_id}
            Method: OPTIONS

  # Day 3 - Cost Analyzer Function
  CostAnalyzerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cost_analyzer.lambda_handler
      Runtime: python3.11
      CodeUri: backend/lambda/
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref CloudOpsUserPool
          USER_POOL_CLIENT_ID: !Ref CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: cost-analysis
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CostCacheTable
        - Statement:
            - Effect: Allow
              Action:
                - ce:GetCostAndUsage
                - ce:GetDimensionValues
                - ce:GetUsageReport
                - cognito-idp:GetUser
              Resource: "*"
      Events:
        CurrentCostApi:
          Type: Api
          Properties:
            Path: /costs/current
            Method: GET
        ServiceCostApi:
          Type: Api
          Properties:
            Path: /costs/services
            Method: GET
        TrendsCostApi:
          Type: Api
          Properties:
            Path: /costs/trends
            Method: GET
        TagCostApi:
          Type: Api
          Properties:
            Path: /costs/by-tag
            Method: GET
        CurrentCostOptions:
          Type: Api
          Properties:
            Path: /costs/current
            Method: OPTIONS
        ServiceCostOptions:
          Type: Api
          Properties:
            Path: /costs/services
            Method: OPTIONS
        TrendsCostOptions:
          Type: Api
          Properties:
            Path: /costs/trends
            Method: OPTIONS
        TagCostOptions:
          Type: Api
          Properties:
            Path: /costs/by-tag
            Method: OPTIONS

  # Day 4 - Budget Manager Function
  BudgetManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: budget_manager.lambda_handler
      Runtime: python3.11
      CodeUri: backend/lambda/
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref CloudOpsUserPool
          USER_POOL_CLIENT_ID: !Ref CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: budget-management
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BudgetConfigTable
        - DynamoDBReadPolicy:
            TableName: !Ref CostCacheTable
        - Statement:
            - Effect: Allow
              Action:
                - ce:GetCostAndUsage
                - sns:Publish
                - cognito-idp:GetUser
              Resource: "*"
      Events:
        ConfigureBudgetApi:
          Type: Api
          Properties:
            Path: /budgets/configure
            Method: POST
        BudgetStatusApi:
          Type: Api
          Properties:
            Path: /budgets/status
            Method: GET
        BudgetAlertsApi:
          Type: Api
          Properties:
            Path: /budgets/alerts
            Method: GET
        ConfigureBudgetOptions:
          Type: Api
          Properties:
            Path: /budgets/configure
            Method: OPTIONS
        BudgetStatusOptions:
          Type: Api
          Properties:
            Path: /budgets/status
            Method: OPTIONS
        BudgetAlertsOptions:
          Type: Api
          Properties:
            Path: /budgets/alerts
            Method: OPTIONS
        DeleteBudgetApi:
          Type: Api
          Properties:
            Path: /budgets/delete/{budget_id}
            Method: DELETE
        DeleteBudgetOptions:
          Type: Api
          Properties:
            Path: /budgets/delete/{budget_id}
            Method: OPTIONS

  # Day 5 - Cognito User Pool
  CloudOpsUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cloudops-assistant-users
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
      UserPoolTags:
        Service: cloudops-assistant
        Feature: authentication

  # Day 5 - Authentication Handler Function
  AuthHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth_handler.lambda_handler
      Runtime: python3.11
      CodeUri: backend/lambda/
      MemorySize: 256
      Timeout: 30
      Tags:
        Service: cloudops-assistant
        Feature: authentication
      Environment:
        Variables:
          USER_POOL_ID: !Ref CloudOpsUserPool
          USER_POOL_CLIENT_ID: !Ref CloudOpsUserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        RegisterApi:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST
        LoginApi:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
        VerifyApi:
          Type: Api
          Properties:
            Path: /auth/verify
            Method: POST
        RegisterOptions:
          Type: Api
          Properties:
            Path: /auth/register
            Method: OPTIONS
            RestApiId: !Ref ServerlessRestApi
        LoginOptions:
          Type: Api
          Properties:
            Path: /auth/login
            Method: OPTIONS
            RestApiId: !Ref ServerlessRestApi
        VerifyOptions:
          Type: Api
          Properties:
            Path: /auth/verify
            Method: OPTIONS
            RestApiId: !Ref ServerlessRestApi

  # Day 5 - Cognito User Pool Client
  CloudOpsUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CloudOpsUserPool
      ClientName: cloudops-assistant-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30

  # Day 4 - Budget Configuration Table
  BudgetConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-budget-config
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: budget_id
          AttributeType: S
      KeySchema:
        - AttributeName: budget_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: budget-management

  # Day 3 - Cost Cache Table for storing cost data
  CostCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-cost-cache
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: cache_key
          AttributeType: S
      KeySchema:
        - AttributeName: cache_key
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: cost-analysis

  # Day 2 - Terraform Plans Table for history tracking
  TerraformPlansTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-terraform-plans
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: plan_id
          AttributeType: S
        - AttributeName: repo_name
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: plan_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: repo-timestamp-index
          KeySchema:
            - AttributeName: repo_name
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: plan-history

Outputs:
  CloudOpsAssistantApi:
    Description: "API Gateway endpoint URL for CloudOps Assistant"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: CloudOpsAssistantApiUrl
      
  TerraformPlansTableName:
    Description: "DynamoDB table for storing terraform plans"
    Value: !Ref TerraformPlansTable
    Export:
      Name: CloudOpsTerraformPlansTable
      
  CostCacheTableName:
    Description: "DynamoDB table for caching cost data"
    Value: !Ref CostCacheTable
    Export:
      Name: CloudOpsCostCacheTable
      
  UserPoolId:
    Description: "Cognito User Pool ID for authentication"
    Value: !Ref CloudOpsUserPool
    Export:
      Name: CloudOpsUserPoolId
      
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CloudOpsUserPoolClient
    Export:
      Name: CloudOpsUserPoolClientId