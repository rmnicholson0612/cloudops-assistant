AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CloudOps Assistant â€“ Day 8 AI Terraform Explainer

Globals:
  Function:
    Tags:
      Service: cloudops-assistant
      Project: CloudOpsAssistant
      Environment: prod
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:
  RepoScannerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: repo_scanner.lambda_handler
      Runtime: python3.12
      CodeUri: backend/lambda/
      MemorySize: 512
      Timeout: 300
      Layers:
        - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CloudOpsUserPool
          USER_POOL_CLIENT_ID:
            Ref: CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: repo-scanning
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource:
                Fn::GetAtt: [CloudOpsUserPool, Arn]
      Events:
        Api:
          Type: Api
          Properties:
            Path: /scan-repos
            Method: POST
        ApiOptions:
          Type: Api
          Properties:
            Path: /scan-repos
            Method: OPTIONS

  PlanProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: plan_processor.lambda_handler
      Runtime: python3.12
      CodeUri: backend/lambda/
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CloudOpsUserPool
          USER_POOL_CLIENT_ID:
            Ref: CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: plan-processing
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: TerraformPlansTable
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource:
                Fn::GetAtt: [CloudOpsUserPool, Arn]
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload-plan
            Method: POST
        ApiOptions:
          Type: Api
          Properties:
            Path: /upload-plan
            Method: OPTIONS

  PlanHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: plan_history.lambda_handler
      Runtime: python3.12
      CodeUri: backend/lambda/
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CloudOpsUserPool
          USER_POOL_CLIENT_ID:
            Ref: CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: plan-history
      Policies:
        - DynamoDBReadPolicy:
            TableName:
              Ref: TerraformPlansTable
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource:
                Fn::GetAtt: [CloudOpsUserPool, Arn]
      Events:
        HistoryApi:
          Type: Api
          Properties:
            Path: /plan-history/{repo}
            Method: GET
        CompareApi:
          Type: Api
          Properties:
            Path: /compare-plans/{plan1}/{plan2}
            Method: GET
        PlanDetailsApi:
          Type: Api
          Properties:
            Path: /plan-details/{plan_id}
            Method: GET
        HistoryOptions:
          Type: Api
          Properties:
            Path: /plan-history/{repo}
            Method: OPTIONS
        CompareOptions:
          Type: Api
          Properties:
            Path: /compare-plans/{plan1}/{plan2}
            Method: OPTIONS
        PlanDetailsOptions:
          Type: Api
          Properties:
            Path: /plan-details/{plan_id}
            Method: OPTIONS

  CostAnalyzerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cost_analyzer.lambda_handler
      Runtime: python3.12
      CodeUri: backend/lambda/
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CloudOpsUserPool
          USER_POOL_CLIENT_ID:
            Ref: CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: cost-analysis
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: CostCacheTable
        - Statement:
            - Effect: Allow
              Action:
                - ce:GetCostAndUsage
                - ce:GetDimensionValues
                - ce:GetUsageReport
                - cognito-idp:GetUser
              Resource: "*"
      Events:
        CurrentCostApi:
          Type: Api
          Properties:
            Path: /costs/current
            Method: GET
        ServiceCostApi:
          Type: Api
          Properties:
            Path: /costs/services
            Method: GET
        TrendsCostApi:
          Type: Api
          Properties:
            Path: /costs/trends
            Method: GET
        TagCostApi:
          Type: Api
          Properties:
            Path: /costs/by-tag
            Method: GET
        CurrentCostOptions:
          Type: Api
          Properties:
            Path: /costs/current
            Method: OPTIONS
        ServiceCostOptions:
          Type: Api
          Properties:
            Path: /costs/services
            Method: OPTIONS
        TrendsCostOptions:
          Type: Api
          Properties:
            Path: /costs/trends
            Method: OPTIONS
        TagCostOptions:
          Type: Api
          Properties:
            Path: /costs/by-tag
            Method: OPTIONS

  BudgetManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: budget_manager.lambda_handler
      Runtime: python3.12
      CodeUri: backend/lambda/
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CloudOpsUserPool
          USER_POOL_CLIENT_ID:
            Ref: CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: budget-management
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: BudgetConfigTable
        - DynamoDBReadPolicy:
            TableName:
              Ref: CostCacheTable
        - Statement:
            - Effect: Allow
              Action:
                - ce:GetCostAndUsage
                - sns:Publish
                - cognito-idp:GetUser
              Resource: "*"
      Events:
        ConfigureBudgetApi:
          Type: Api
          Properties:
            Path: /budgets/configure
            Method: POST
        BudgetStatusApi:
          Type: Api
          Properties:
            Path: /budgets/status
            Method: GET
        BudgetAlertsApi:
          Type: Api
          Properties:
            Path: /budgets/alerts
            Method: GET
        ConfigureBudgetOptions:
          Type: Api
          Properties:
            Path: /budgets/configure
            Method: OPTIONS
        BudgetStatusOptions:
          Type: Api
          Properties:
            Path: /budgets/status
            Method: OPTIONS
        BudgetAlertsOptions:
          Type: Api
          Properties:
            Path: /budgets/alerts
            Method: OPTIONS
        DeleteBudgetApi:
          Type: Api
          Properties:
            Path: /budgets/delete/{budget_id}
            Method: DELETE
        DeleteBudgetOptions:
          Type: Api
          Properties:
            Path: /budgets/delete/{budget_id}
            Method: OPTIONS

  DriftSchedulerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: drift_scheduler.lambda_handler
      Runtime: python3.12
      CodeUri: backend/lambda/
      MemorySize: 1024
      Timeout: 900
      Layers:
        - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CloudOpsUserPool
          USER_POOL_CLIENT_ID:
            Ref: CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: drift-monitoring
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: DriftConfigTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: TerraformPlansTable
        - Statement:
            - Effect: Allow
              Action:
                - sns:CreateTopic
                - sns:Subscribe
                - sns:Publish
              Resource: "*"
      Events:
        ScheduleHourly:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Description: "Hourly drift monitoring check (respects per-repo schedules)"

  DriftConfigFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: drift_config.lambda_handler
      Runtime: python3.12
      CodeUri: backend/lambda/
      MemorySize: 1024
      Timeout: 600
      Layers:
        - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CloudOpsUserPool
          USER_POOL_CLIENT_ID:
            Ref: CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: drift-configuration
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: DriftConfigTable
        - DynamoDBCrudPolicy:
            TableName:
              Ref: TerraformPlansTable
        - Statement:
            - Effect: Allow
              Action:
                - sns:CreateTopic
                - sns:Subscribe
                - sns:Publish
                - cognito-idp:GetUser
              Resource: "*"
      Events:
        ConfigureApi:
          Type: Api
          Properties:
            Path: /drift/configure
            Method: POST
        StatusApi:
          Type: Api
          Properties:
            Path: /drift/status
            Method: GET
        DeleteApi:
          Type: Api
          Properties:
            Path: /drift/delete/{config_id}
            Method: DELETE
        ConfigureOptions:
          Type: Api
          Properties:
            Path: /drift/configure
            Method: OPTIONS
        StatusOptions:
          Type: Api
          Properties:
            Path: /drift/status
            Method: OPTIONS
        ManualScanApi:
          Type: Api
          Properties:
            Path: /drift/scan/{config_id}
            Method: POST
        DeleteOptions:
          Type: Api
          Properties:
            Path: /drift/delete/{config_id}
            Method: OPTIONS
        ManualScanOptions:
          Type: Api
          Properties:
            Path: /drift/scan/{config_id}
            Method: OPTIONS
        UpdateApi:
          Type: Api
          Properties:
            Path: /drift/update/{config_id}
            Method: PUT
        UpdateOptions:
          Type: Api
          Properties:
            Path: /drift/update/{config_id}
            Method: OPTIONS

  AIExplainerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ai_explainer.lambda_handler
      Runtime: python3.12
      CodeUri: backend/lambda/
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CloudOpsUserPool
          USER_POOL_CLIENT_ID:
            Ref: CloudOpsUserPoolClient
      Tags:
        Service: cloudops-assistant
        Feature: ai-explainer
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: TerraformPlansTable
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - cognito-idp:GetUser
              Resource: "*"
      Events:
        ExplainApi:
          Type: Api
          Properties:
            Path: /ai/explain
            Method: POST
        ExplanationsApi:
          Type: Api
          Properties:
            Path: /ai/explanations
            Method: GET
        ExplainOptions:
          Type: Api
          Properties:
            Path: /ai/explain
            Method: OPTIONS
        ExplanationsOptions:
          Type: Api
          Properties:
            Path: /ai/explanations
            Method: OPTIONS

  CloudOpsUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cloudops-assistant-users
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
      UserPoolTags:
        Service: cloudops-assistant
        Feature: authentication

  AuthHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth_handler.lambda_handler
      Runtime: python3.12
      CodeUri: backend/lambda/
      MemorySize: 256
      Timeout: 30
      Tags:
        Service: cloudops-assistant
        Feature: authentication
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CloudOpsUserPool
          USER_POOL_CLIENT_ID:
            Ref: CloudOpsUserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:GetUser
              Resource:
                Fn::GetAtt: [CloudOpsUserPool, Arn]
      Events:
        RegisterApi:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST
        LoginApi:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
        VerifyApi:
          Type: Api
          Properties:
            Path: /auth/verify
            Method: POST
        RegisterOptions:
          Type: Api
          Properties:
            Path: /auth/register
            Method: OPTIONS
        LoginOptions:
          Type: Api
          Properties:
            Path: /auth/login
            Method: OPTIONS
        VerifyOptions:
          Type: Api
          Properties:
            Path: /auth/verify
            Method: OPTIONS

  CloudOpsUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CloudOpsUserPool
      ClientName: cloudops-assistant-client-v2
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30

  BudgetConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-budget-config
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: budget_id
          AttributeType: S
      KeySchema:
        - AttributeName: budget_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: budget-management

  CostCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-cost-cache
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: cache_key
          AttributeType: S
      KeySchema:
        - AttributeName: cache_key
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: cost-analysis

  TerraformPlansTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-terraform-plans
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: plan_id
          AttributeType: S
        - AttributeName: repo_name
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: plan_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: repo-timestamp-index
          KeySchema:
            - AttributeName: repo_name
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: plan-history

  DriftConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-drift-config
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: config_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: config_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: drift-monitoring

Outputs:
  CloudOpsAssistantApi:
    Description: "API Gateway endpoint URL for CloudOps Assistant"
    Value:
      Fn::Sub: "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: CloudOpsAssistantApiUrl

  TerraformPlansTableName:
    Description: "DynamoDB table for storing terraform plans"
    Value:
      Ref: TerraformPlansTable
    Export:
      Name: CloudOpsTerraformPlansTable

  CostCacheTableName:
    Description: "DynamoDB table for caching cost data"
    Value:
      Ref: CostCacheTable
    Export:
      Name: CloudOpsCostCacheTable

  UserPoolId:
    Description: "Cognito User Pool ID for authentication"
    Value:
      Ref: CloudOpsUserPool
    Export:
      Name: CloudOpsUserPoolId

  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value:
      Ref: CloudOpsUserPoolClient
    Export:
      Name: CloudOpsUserPoolClientId
