AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CloudOps Assistant - Day 14 with Local Development Support

# No parameters - all configuration comes from environment variables

Globals:
  Function:
    Timeout: 60
    Environment:
      Variables:
        USER_POOL_ID: !Ref CloudOpsUserPool
        USER_POOL_CLIENT_ID: !Ref CloudOpsUserPoolClient
        ENVIRONMENT: ${ENVIRONMENT}
        BEDROCK_MODEL: ${BEDROCK_MODEL}
        BEDROCK_COMPLEX_MODEL: ${BEDROCK_COMPLEX_MODEL}
        BEDROCK_SIMPLE_MODEL: ${BEDROCK_SIMPLE_MODEL}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
      MaxAge: "'86400'"
    GatewayResponses:
      DEFAULT_4XX:
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'*'"
            Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
      DEFAULT_5XX:
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'*'"
            Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

Resources:
  # Existing Resources (keeping all current functionality)

  # Cognito User Pool
  CloudOpsUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cloudops-assistant-users
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
      UserPoolTags:
        Service: cloudops-assistant
        Feature: authentication

  CloudOpsUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CloudOpsUserPool
      ClientName: cloudops-assistant-client-v2
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30

  # DynamoDB Tables
  TerraformPlansTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-terraform-plans
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: plan_id
          AttributeType: S
        - AttributeName: repo_name
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: plan_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: repo-timestamp-index
          KeySchema:
            - AttributeName: repo_name
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: plan-history

  CostCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-cost-cache
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: cache_key
          AttributeType: S
      KeySchema:
        - AttributeName: cache_key
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: cost-analysis

  DriftConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-drift-config
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: config_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: config_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: drift-monitoring

  BudgetConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-budget-config
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: budget_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: budget_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: budget-management

  PostmortemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PostmortemsTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: postmortem_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: postmortem_id
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: postmortem-generator

  # NEW: Resource Discovery Table
  ResourceDiscoveryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-resource-discovery
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: scan_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: scan_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: resource-discovery

  # Slack User Mapping Table
  # Slack User Mapping Table
  SlackUserMappingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-slack-user-mapping
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: slack_user_id
          AttributeType: S
        - AttributeName: cognito_user_id
          AttributeType: S
      KeySchema:
        - AttributeName: slack_user_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: cognito-user-index
          KeySchema:
            - AttributeName: cognito_user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: slack-integration

  # PR Reviews Table
  PRReviewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-pr-reviews
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: review_id
          AttributeType: S
        - AttributeName: repo_name
          AttributeType: S
      KeySchema:
        - AttributeName: review_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: repo-name-index
          KeySchema:
            - AttributeName: repo_name
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: pr-reviews

  # EOL Tracker Tables
  EOLDatabaseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-eol-database
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: eol_id
          AttributeType: S
        - AttributeName: technology_type
          AttributeType: S
      KeySchema:
        - AttributeName: eol_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: technology-type-index
          KeySchema:
            - AttributeName: technology_type
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: eol-tracker

  EOLScansTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-eol-scans
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: scan_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: scan_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: eol-tracker

  # Security Findings Table
  SecurityFindingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-security-findings
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: security-scanner

  # Service Documentation Resources
  ServiceDocsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudops-assistant-service-docs-v2
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: service_name
          AttributeType: S
        - AttributeName: doc_name
          AttributeType: S
      KeySchema:
        - AttributeName: service_name
          KeyType: HASH
        - AttributeName: doc_name
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: cloudops-assistant
        - Key: Feature
          Value: service-documentation

  ServiceDocsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'cloudops-assistant-service-docs-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: ArchiveOldDocuments
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER

  # Lambda Functions
  AuthHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: auth_handler.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        AuthProxy:
          Type: Api
          Properties:
            Path: /auth/{proxy+}
            Method: ANY

  PlanProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: plan_processor.lambda_handler
      Runtime: python3.13
      MemorySize: 512
      Environment:
        Variables:
          TERRAFORM_PLANS_TABLE: !Ref TerraformPlansTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TerraformPlansTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        UploadPlan:
          Type: Api
          Properties:
            Path: /upload-plan
            Method: post

  PlanHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: plan_history.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          TERRAFORM_PLANS_TABLE: !Ref TerraformPlansTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TerraformPlansTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        PlanHistory:
          Type: Api
          Properties:
            Path: /plan-history/{repo}
            Method: get
        PlanDetails:
          Type: Api
          Properties:
            Path: /plan-details/{plan_id}
            Method: get
        ComparePlans:
          Type: Api
          Properties:
            Path: /compare-plans/{plan1}/{plan2}
            Method: get

  CostAnalyzerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: cost_analyzer.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          COST_CACHE_TABLE: !Ref CostCacheTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CostCacheTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ce:GetCostAndUsage
                - ce:GetDimensionValues
                - ce:GetUsageReport
                - cognito-idp:GetUser
              Resource: '*'
      Events:
        CurrentCost:
          Type: Api
          Properties:
            Path: /costs/current
            Method: get
        ServiceCost:
          Type: Api
          Properties:
            Path: /costs/services
            Method: get
        TrendsCost:
          Type: Api
          Properties:
            Path: /costs/trends
            Method: get
        TagCost:
          Type: Api
          Properties:
            Path: /costs/by-tag
            Method: get

  BudgetManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: budget_manager.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          BUDGET_CONFIG_TABLE: !Ref BudgetConfigTable
          COST_CACHE_TABLE: !Ref CostCacheTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BudgetConfigTable
        - DynamoDBReadPolicy:
            TableName: !Ref CostCacheTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ce:GetCostAndUsage
                - sns:Publish
                - cognito-idp:GetUser
              Resource: '*'
      Events:
        ConfigureBudget:
          Type: Api
          Properties:
            Path: /budgets/configure
            Method: post
        BudgetStatus:
          Type: Api
          Properties:
            Path: /budgets/status
            Method: get
        BudgetAlerts:
          Type: Api
          Properties:
            Path: /budgets/alerts
            Method: get
        DeleteBudget:
          Type: Api
          Properties:
            Path: /budgets/delete/{budget_id}
            Method: delete
        UpdateBudget:
          Type: Api
          Properties:
            Path: /budgets/update/{budget_id}
            Method: put

  DriftConfigFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: drift_config.lambda_handler
      Runtime: python3.13
      MemorySize: 1024
      Timeout: 600
      Environment:
        Variables:
          DRIFT_CONFIG_TABLE: !Ref DriftConfigTable
          TERRAFORM_PLANS_TABLE: !Ref TerraformPlansTable
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:553035198032:layer:git-lambda2:8'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DriftConfigTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TerraformPlansTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sns:CreateTopic
                - sns:Subscribe
                - sns:Publish
                - cognito-idp:GetUser
                - lambda:InvokeFunction
                - lambda:ListFunctions
              Resource: '*'
      Events:
        Configure:
          Type: Api
          Properties:
            Path: /drift/configure
            Method: post
        Status:
          Type: Api
          Properties:
            Path: /drift/status
            Method: get
        Update:
          Type: Api
          Properties:
            Path: /drift/update/{config_id}
            Method: put
        Delete:
          Type: Api
          Properties:
            Path: /drift/delete/{config_id}
            Method: delete
        ManualScan:
          Type: Api
          Properties:
            Path: /drift/scan/{config_id}
            Method: post

  DriftSchedulerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: drift_scheduler.lambda_handler
      Runtime: python3.13
      MemorySize: 1024
      Timeout: 900
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:553035198032:layer:git-lambda2:8'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DriftConfigTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TerraformPlansTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sns:CreateTopic
                - sns:Subscribe
                - sns:Publish
              Resource: '*'
      Events:
        ScheduleHourly:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Description: Hourly drift monitoring check (respects per-repo schedules)

  RepoScannerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: repo_scanner.lambda_handler
      Runtime: python3.13
      MemorySize: 512
      Timeout: 300
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:553035198032:layer:git-lambda2:8'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        ScanRepos:
          Type: Api
          Properties:
            Path: /scan-repos
            Method: post

  AIExplainerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: ai_explainer.lambda_handler
      Runtime: python3.13
      MemorySize: 512
      Environment:
        Variables:
          TERRAFORM_PLANS_TABLE: !Ref TerraformPlansTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TerraformPlansTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - cognito-idp:GetUser
              Resource: '*'
      Events:
        Explain:
          Type: Api
          Properties:
            Path: /ai/explain
            Method: post
        Explanations:
          Type: Api
          Properties:
            Path: /ai/explanations
            Method: get

  PostmortemGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: postmortem_generator.lambda_handler
      Runtime: python3.13
      MemorySize: 512
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TerraformPlansTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PostmortemsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
                - cognito-idp:ListUsers
                - ce:GetCostAndUsage
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource: '*'
      Events:
        Create:
          Type: Api
          Properties:
            Path: /postmortems
            Method: post
        List:
          Type: Api
          Properties:
            Path: /postmortems
            Method: get
        Get:
          Type: Api
          Properties:
            Path: /postmortems/{postmortem_id}
            Method: get
        Update:
          Type: Api
          Properties:
            Path: /postmortems/{postmortem_id}
            Method: put
        Delete:
          Type: Api
          Properties:
            Path: /postmortems/{postmortem_id}
            Method: delete
        Generate:
          Type: Api
          Properties:
            Path: /postmortems/generate
            Method: post
        Suggest:
          Type: Api
          Properties:
            Path: /postmortems/suggest
            Method: post
        Previous:
          Type: Api
          Properties:
            Path: /postmortems/previous
            Method: post
        Conversation:
          Type: Api
          Properties:
            Path: /postmortems/conversation
            Method: post
        Users:
          Type: Api
          Properties:
            Path: /users
            Method: get

  # NEW: Resource Discovery Function
  ResourceDiscoveryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: resource_discovery.lambda_handler
      Runtime: python3.13
      MemorySize: 1024
      Timeout: 900
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ResourceDiscoveryTable
        - DynamoDBReadPolicy:
            TableName: !Ref CostCacheTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
                - ec2:DescribeVpcs
                - ec2:DescribeSecurityGroups
                - lambda:ListFunctions
                - lambda:ListTags
                - rds:DescribeDBInstances
                - rds:ListTagsForResource
                - s3:ListAllMyBuckets
                - s3:GetBucketTagging
                - s3:GetBucketLocation
                - elbv2:DescribeLoadBalancers
                - elbv2:DescribeTags
                - ce:GetCostAndUsage
                - bedrock:InvokeModel
                - cognito-idp:GetUser
              Resource: '*'
      Events:
        DiscoveryProxy:
          Type: Api
          Properties:
            Path: /discovery/{proxy+}
            Method: ANY
            RestApiId: !Ref ServerlessRestApi

  # Resource Discovery Scheduler Function
  ResourceDiscoverySchedulerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: resource_discovery_scheduler.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Timeout: 300
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ResourceDiscoveryTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt ResourceDiscoveryFunction.Arn
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 2 * * ? *)  # Daily at 2 AM UTC
            Description: Daily resource discovery scans for enabled users

  # Service Documentation Function
  ServiceDocsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: service_docs.lambda_handler
      Runtime: python3.13
      MemorySize: 512
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ServiceDocsBucket
        - S3WritePolicy:
            BucketName: !Ref ServiceDocsBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref ServiceDocsTable
        - DynamoDBReadPolicy:
            TableName: !Ref TerraformPlansTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - cognito-idp:GetUser
              Resource: '*'
      Events:
        ListServices:
          Type: Api
          Properties:
            Path: /docs/services
            Method: get
        RegisterService:
          Type: Api
          Properties:
            Path: /docs/register
            Method: post
        UploadDoc:
          Type: Api
          Properties:
            Path: /docs/upload
            Method: post
        SearchDocs:
          Type: Api
          Properties:
            Path: /docs/search
            Method: post
        ListDocs:
          Type: Api
          Properties:
            Path: /docs/list
            Method: get
        GetDoc:
          Type: Api
          Properties:
            Path: /docs/get
            Method: post
        DeleteDoc:
          Type: Api
          Properties:
            Path: /docs/delete
            Method: delete

  SlackBotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: slack_bot.lambda_handler
      Runtime: python3.13
      MemorySize: 512
      Environment:
        Variables:
          TERRAFORM_PLANS_TABLE: !Ref TerraformPlansTable
          POSTMORTEMS_TABLE: !Ref PostmortemsTable
          SERVICE_DOCS_TABLE: !Ref ServiceDocsTable
          DRIFT_CONFIGS_TABLE: !Ref DriftConfigTable
          COST_CACHE_TABLE: !Ref CostCacheTable
          SLACK_USER_MAPPING_TABLE: !Ref SlackUserMappingTable
          SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
          SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TerraformPlansTable
        - DynamoDBReadPolicy:
            TableName: !Ref PostmortemsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ServiceDocsTable
        - DynamoDBReadPolicy:
            TableName: !Ref DriftConfigTable
        - DynamoDBReadPolicy:
            TableName: !Ref CostCacheTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SlackUserMappingTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - ce:GetCostAndUsage
                - cognito-idp:GetUser
              Resource: '*'
      Events:
        SlackEvents:
          Type: Api
          Properties:
            Path: /slack/events
            Method: post
        SlackCommands:
          Type: Api
          Properties:
            Path: /slack/commands
            Method: post

  SlackLinkingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: slack_linking.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Environment:
        Variables:
          SLACK_USER_MAPPING_TABLE: !Ref SlackUserMappingTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SlackUserMappingTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminInitiateAuth
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        SlackLink:
          Type: Api
          Properties:
            Path: /slack/link
            Method: get
        SlackConfirm:
          Type: Api
          Properties:
            Path: /slack/confirm
            Method: post

  # PR Webhook Handler Function
  PRWebhookHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: pr_webhook_handler.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Environment:
        Variables:
          PR_REVIEWS_TABLE: !Ref PRReviewsTable
          PR_ANALYZER_FUNCTION: !Ref PRReviewAnalyzerFunction
          GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PRReviewsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt PRReviewAnalyzerFunction.Arn
      Events:
        PRWebhook:
          Type: Api
          Properties:
            Path: /pr-webhook
            Method: post

  # PR Review Analyzer Function
  PRReviewAnalyzerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: pr_review_analyzer.lambda_handler
      Runtime: python3.13
      MemorySize: 512
      Timeout: 300
      Environment:
        Variables:
          PR_REVIEWS_TABLE: !Ref PRReviewsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PRReviewsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*'

  # EOL Tracker Function
  EOLTrackerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: eol_tracker.lambda_handler
      Runtime: python3.13
      MemorySize: 512
      Timeout: 300
      Environment:
        Variables:
          EOL_DATABASE_TABLE: !Ref EOLDatabaseTable
          EOL_SCANS_TABLE: !Ref EOLScansTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EOLDatabaseTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EOLScansTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        EOLProxy:
          Type: Api
          Properties:
            Path: /eol/{proxy+}
            Method: ANY

  # EOL Scheduler Function
  EOLSchedulerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: eol_scheduler.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Timeout: 900
      Environment:
        Variables:
          EOL_DATABASE_TABLE: !Ref EOLDatabaseTable
          EOL_SCANS_TABLE: !Ref EOLScansTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EOLDatabaseTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EOLScansTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt EOLTrackerFunction.Arn
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 6 * * ? *)  # Daily at 6 AM UTC
            Description: Daily EOL database updates and scans

  # PR Reviews API Function
  PRReviewsAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/
      Handler: pr_reviews_api.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Environment:
        Variables:
          PR_REVIEWS_TABLE: !Ref PRReviewsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PRReviewsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
      Events:
        PRReviews:
          Type: Api
          Properties:
            Path: /pr-reviews
            Method: get
        PRReviewDetails:
          Type: Api
          Properties:
            Path: /pr-reviews/{review_id}
            Method: get
        ConfigurePRReviews:
          Type: Api
          Properties:
            Path: /pr-reviews/configure
            Method: post

  # Security Scanner Function
  SecurityScannerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/lambda/security_scanner/
      Handler: security_scanner.lambda_handler
      Runtime: python3.13
      MemorySize: 1024
      Timeout: 900
      Environment:
        Variables:
          SECURITY_FINDINGS_TABLE: !Ref SecurityFindingsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SecurityFindingsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:Describe*
                - s3:List*
                - s3:Get*
                - iam:List*
                - iam:Get*
                - lambda:List*
                - rds:Describe*
                - cloudtrail:DescribeTrails
                - cloudtrail:GetTrailStatus
                - config:DescribeConfigurationRecorders
                - config:DescribeDeliveryChannels
                - cloudwatch:DescribeAlarms
                - logs:DescribeLogGroups
                - kms:ListKeys
                - kms:DescribeKey
                - cognito-idp:GetUser
              Resource: '*'
      Events:
        SecurityScan:
          Type: Api
          Properties:
            Path: /security/scan
            Method: post
        SecurityFindings:
          Type: Api
          Properties:
            Path: /security/findings
            Method: get
        SecurityCompliance:
          Type: Api
          Properties:
            Path: /security/compliance
            Method: get
        SecurityAccounts:
          Type: Api
          Properties:
            Path: /security/accounts
            Method: get

  # Terraform Results S3 Bucket
  TerraformResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'cloudops-terraform-results-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldResults
            Status: Enabled
            ExpirationInDays: 7

  # ECS Cluster
  TerraformExecutorCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: terraform-executor-cluster
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # ECS Task Definition
  TerraformExecutorTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: terraform-executor
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref TerraformExecutorExecutionRole
      TaskRoleArn: !Ref TerraformExecutorTaskRole
      ContainerDefinitions:
        - Name: terraform
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cloudops-terraform-executor:latest'
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TerraformExecutorLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: RESULTS_BUCKET
              Value: !Ref TerraformResultsBucket

  # ECS Task Execution Role
  TerraformExecutorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  # ECS Task Role (for Terraform execution)
  TerraformExecutorTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      Policies:
        - PolicyName: S3ResultsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub '${TerraformResultsBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt TerraformResultsBucket.Arn
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt TerraformPlansTable.Arn

  # CloudWatch Log Group
  TerraformExecutorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/terraform-executor
      RetentionInDays: 7

  # Lambda Function (ECS Trigger)
  TerraformExecutorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/terraform-executor/
      Handler: terraform_executor.lambda_handler
      Runtime: python3.13
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref CloudOpsUserPool
          ECS_CLUSTER: !Ref TerraformExecutorCluster
          ECS_TASK_DEFINITION: !Ref TerraformExecutorTaskDefinition
          RESULTS_BUCKET: !Ref TerraformResultsBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: !GetAtt CloudOpsUserPool.Arn
            - Effect: Allow
              Action:
                - ecs:RunTask
                - ecs:DescribeTasks
              Resource: '*'
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt TerraformExecutorExecutionRole.Arn
                - !GetAtt TerraformExecutorTaskRole.Arn
            - Effect: Allow
              Action:
                - ec2:DescribeVpcs
                - ec2:DescribeSubnets
                - ec2:DescribeSecurityGroups
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub '${TerraformResultsBucket.Arn}/*'
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: !GetAtt TerraformResultsBucket.Arn
      Events:
        TerraformExecute:
          Type: Api
          Properties:
            Path: /terraform/execute
            Method: post
        TerraformStatus:
          Type: Api
          Properties:
            Path: /terraform/status
            Method: get

Outputs:
  CloudOpsAssistantApi:
    Description: API Gateway endpoint URL for CloudOps Assistant
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
    Export:
      Name: CloudOpsAssistantApiUrl

  TerraformPlansTableName:
    Description: DynamoDB table for storing terraform plans
    Value: !Ref TerraformPlansTable
    Export:
      Name: CloudOpsTerraformPlansTable

  CostCacheTableName:
    Description: DynamoDB table for caching cost data
    Value: !Ref CostCacheTable
    Export:
      Name: CloudOpsCostCacheTable

  UserPoolId:
    Description: Cognito User Pool ID for authentication
    Value: !Ref CloudOpsUserPool
    Export:
      Name: CloudOpsUserPoolId

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CloudOpsUserPoolClient
    Export:
      Name: CloudOpsUserPoolClientId

  ServiceDocsBucketName:
    Description: S3 Bucket for Service Documentation
    Value: !Ref ServiceDocsBucket
    Export:
      Name: CloudOpsServiceDocsBucket

  ServiceDocsTableName:
    Description: DynamoDB table for service documentation metadata
    Value: !Ref ServiceDocsTable
    Export:
      Name: CloudOpsServiceDocsTable

  ResourceDiscoveryTableName:
    Description: DynamoDB table for resource discovery scans
    Value: !Ref ResourceDiscoveryTable
    Export:
      Name: CloudOpsResourceDiscoveryTable

  PRReviewsTableName:
    Description: DynamoDB table for PR reviews
    Value: !Ref PRReviewsTable
    Export:
      Name: CloudOpsPRReviewsTable

  PRWebhookURL:
    Description: GitHub webhook URL for PR reviews
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/pr-webhook'
    Export:
      Name: CloudOpsPRWebhookURL

  EOLDatabaseTableName:
    Description: DynamoDB table for EOL database
    Value: !Ref EOLDatabaseTable
    Export:
      Name: CloudOpsEOLDatabaseTable

  EOLScansTableName:
    Description: DynamoDB table for EOL scans
    Value: !Ref EOLScansTable
    Export:
      Name: CloudOpsEOLScansTable

  SecurityFindingsTableName:
    Description: DynamoDB table for security findings
    Value: !Ref SecurityFindingsTable
    Export:
      Name: CloudOpsSecurityFindingsTable

  TerraformExecutorECRRepository:
    Description: ECR Repository for Terraform Executor container
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cloudops-terraform-executor'
    Export:
      Name: CloudOpsTerraformExecutorECR

  TerraformExecutorTaskDefinitionArn:
    Description: ECS Task Definition ARN for Terraform Executor
    Value: !Ref TerraformExecutorTaskDefinition
    Export:
      Name: CloudOpsTerraformExecutorTaskDefinition

  TerraformResultsBucketName:
    Description: S3 Bucket for Terraform execution results
    Value: !Ref TerraformResultsBucket
    Export:
      Name: CloudOpsTerraformResultsBucket
